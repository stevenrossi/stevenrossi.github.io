[{"categories":null,"content":"My goal with this project was to develop a Formula 1 visualizer that analysed relatively basic data over a broad time scale, without getting into the more detailed data (e.g., lap-specific times, telemetry) that has become more readily available in recent years. In Formula 1 there are well known difficulties in comparing the relative performance of drivers given that drivers compete in machinery of varying quality, i.e., did driver A finish ahead of driver B because he is a better driver or because he was driving a faster car? As such, the only fair comparison that can be made in races without controlling for a number of complex factors is between teammates, who (typically) compete in identical cars. I therefore sought to develop an analysis that only compared the performance of teammates to one another. In this post I will review how I pulled the necessary data for this project and in follow-up posts I will detail some data manipulation using dplyr in R and the contruction of a Shiny app. For now, I only focus on the performance of teammates against each other in Grand Prix races, though in the future I’d like to add comparisons from qualifying, and less importantly, from sprint races. The Ergast Developer API hosts a large Formula 1 dataset that can be used for a variety of purposes. The dataset includes results from each race and information on drivers, constructors, and circuits from the beginning of the world championships in 1950 to the present day. Other, more detailed but less complete data is also contained in the dataset, such as lap times and pit stop durations. The data can be downloaded several ways, including via API and as a set of .csv files. In this post, I’ll review retrieving the data from a MySQL database image, which can be downloaded here. In order to compare the relative performance of two teammates on race day, we’ll need their finishing position in each race. The Egast Database contains 14 tables, one of which, named results, appears to contain the finishing order (or, positionOrder) in each race: The raceId, driverId, and constructorId columns in results are linked to the races, drivers, and constructors tables, respectively. These tables should contain everything we’ll need for the teammate comparison dataset. Let’s give the results, races, and drivers tables the aliases r, a, d, and c respectively. We construct our dataset with the following SQL code: SELECT r.driverId, r.constructorId, positionText, positionOrder, r.raceId, year, date, round, a.name AS raceName, c.name AS constructorName, CONCAT(surname, ', ', forename) AS driverName, d.number, d.url, dob, d.nationality FROM sql_inventory.results r JOIN races a ON r.raceId = a.raceId JOIN drivers d ON r.driverId = d.driverId JOIN constructors c ON r.constructorId = c.constructorId; This script grabs the driverID, constructorID, positionText, positionOrder, and raceID from the resultstable. positionText gives the numeric finishing position of each car that finished the race and otherwise gives a letter indicating the reason for not finishing the race. In contrast, positionOrder gives the numeric finishing position regardless of whether or not the race was completed. Either could be handy, so we grab both. The selected columns of results are appended by the year, date, and round from the races table and the number, url, dob, and nationality columns from the drivers table. We also contruct a driverName column by combining the surname and forename columns from the drivers table. The three lines beginning with JOIN and ON link the results tables with the other tables via common columns. The resulting dataset is saved to f1-teammate-data-raw.csv. Let’s read this data into R and take a quick look: rawData \u003c- read.csv(\"f1-teammate-data-raw.csv\") rawData driverId constructorId positionText positionOrder raceID year date round raceName 1 1 1 1 1 18 2008 2008-03-16 1 Australian Grand Prix 2 2 2 2 2 18 2008 2008-03-16 1 Australian Grand Prix 3 3 3 3 3 18 2008 ","date":"2023-07-28","objectID":"/posts/3-f1-teammates-part-1-sql/:0:0","tags":["SQL","Motorsports","Formula 1","Ergast"],"title":"Comparing the head-to-head performance of Formula 1 teammates, part 1: Retreiving Ergast data using SQL","uri":"/posts/3-f1-teammates-part-1-sql/"},{"categories":null,"content":"The 2023 24 hours of Le Mans was an historic edition of the legendary endurance race, not only because it marked the 100 year anniversary from the first running, but also because it featured the return of a number of hallowed car manufacturers to the top flight of sports car racing. In this project I aim to make a basic visualization of the distance travelled by each car in the 2023 edition of Le Mans. In doing so, my real goal was not to make any specific insight into the race result but was to see if I could scrape images of all of the cars from an online source and use these in the visualization. Background on the 24 Hours of Le Mans ","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:0:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"History of Le Mans The 24 Hours of Le Mans (or, 24 Heures du Mans) is one of the most prestigious races in motorsport and the oldest active endurance race in the world, first being run in 1923. The race, which is won by the car the covers the greatest distance in 24 hours, is run at the Circuit de la Sarthe at Le Mans, Sarthe, France, which is an amalgamation of public roads and private, race-specific segments that measures 13.626 km in length in its present configuration. The race is currently the centerpiece of the World Endurance Championship (WEC), which is a worldwide series of endurance races, each lasting at least six hours. In motorosports, “sport cars” are closed-wheel, two-seater cars that are either prototypes (i.e., purpose-built for racing and not modified from a production car) or based on high-performance production vehicles. This is contrast to “formula” racing, which employs strictly purpose-buit, open-wheel, single-seaters, and to either “stock car” or “touring car” racing, which are both generally based on common sedans or hatchbacks. Sports car races usually feature multiple classes of car racing simultaneously (i.e., both prototypes and production-based cars), with prototype classes being the “top” or fastest classes. Bugatti, Bentley, and Alfa Romeo were each multiple-time winners of the initial Le Mans races held in the interwar period, with Ferrari and Jaguar emerging as the top manufacters of the postwar era. Ferraris took 6 consecutive races between 1960 and 1965, only to be knocked off their perch by the unlimited bankroll of Ford Motor Company and the ingenuity of Carroll Shelby. (The story of the legendary 1966 race, in which Bruce Mclaren and Chris Amon drove the Ford GT40 Mk. II to victory in a 1-2-3 finish for Ford, was recently told in the film Ford v Ferrari). After failing to win back their Le Man crown in the following years, Ferrari withdrew from sportscar racing to focus soley on Formula 1. Privateers would continue to run their own Ferraris at Le Mans, but Ferrari would not officially back another top-level prototype entry at Le Mans for the next five decades. Porsche were regular Le Mans winners from 1970 through the late 1980s, and a number of privateer teams (i.e., teams not backed by a manufacturer) also excelled. The late 80s and 90s marked an intensely competitive period, with Sauber/Mercedes, Jaguar, Mazda, Peugeot, Porsche, McLaren, and BMW each taking overall victories. Many manufacturers withdraw from sports car racing in the new millenium due to high costs, ushering in a new era of largely uncompetitive prototype racing. Audi won 13 races between 2000 and 2014, while Porsche won each Le Mans between 2015 and 2017. Toyota were consecutive winners from 2018 to 2022, facing little competition in each race. Indeed, from 2019 to 2022, Toyota’s only challengers in the top prototype class were privateer teams running on comparatively miniscule budgets or by cars that had been grandfathered into the prototype class under previous rulesets and posed no serious threat to Toyota. ","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:1:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"The 2023 World Endurance Championship season New regulations were recently introduced that were aimed at reducing the cost of fielding a top-class prototype (now termed “hypercars”), prompting many manufacturers to establish new sports car programs. Peugout, Ferrari, Porsche, and Cadillac announced entries for the 2023 WEC season while Lamborghini, BMW, and Alpine are slated to join in 2024. Would any of these new teams be able to take down the formidable Toyota Gazoo Racing? Le Mans was the fourth race on the 2024 WEC calendar, following the 1000 Miles of Sebring in Florida, the 6 hours of Portimão in the Algarve region of Portugal, and the 6 Hours of Spa-Francorchamps at the historic Circuit de Spa-Francorchamps in Belgium. Ferrari’s Antonio Fuoco pulled off a shock in qualification for the opening race at Sebring, putting the #50 Ferrari on pole, though both of Toyota’s cars (#7 and #8) passed the Ferrari early in the actual race and Toyota cruised to a comfortable victory. I was lucky enough to attend the second race of the season at Portimão. This time, technical issues hampered the #7 Toyota, but the #8 Toyota was able to easily cruise to victory. The Ferraris looked comfortably quicker than the rest of the field and, as a Ferrari fan, I was happy to see the #50 take second place, but closing the gap to Toyota still felt a very long way off. (As an aside, I will mention that Cadillac’s V8 engine sounds so impressive in person - you always know when the Cadillac is driving past you even if you’re watching some other part of the race track. Unfortunately most of the other hypercars run hybrid V6 configurations, which don’t sound nearly as imposing.) The unbiased author enjoys a stroll down pitlane at the 6 Hours of Portimão. The author at the 2023 6 Hours of Portimão paddock with Ryō Hirakawa and Sébastien Buemi of the #8 Toyota. Buemi won Le Mans the 2014, 2018, 2019, and 2022, was Formula E champion in 2015-16 and competed in 55 Formula 1 races for Red Bull junior team Toro Rosso. Hirakawa won the 2022 Le Mans race alongside Buemi. The author at the 2023 6 Hours of Portimão paddock with Antonio Giovinazzi of the #51 Ferrari and eventual winner of the 2023 edition of Le Mans. Giovinazzi completed in 61 Formula 1 races between 2017 and 2021 for Sauber/Alfa Romeo. The #51 receives some final attention in the pits before going out for the 6 Hours of Portimão. The #51 Ferrari passes the United Autosports LMP2 car on the inside going into turn 1 at the Autódromo Internacional do Algarve during Free Practice 3 of the 6 Hours of Portimão. Toyota took pole in the third race of the season at Spa and went on to finish the race 1-2. The #51 Ferrari took third place, a minute and nine seconds behind the winning Toyota. Toyota’s GR010 Hybrid looked unbeatable going into the climax of the season. Ferrari started the Le Mans weekend in ideal fashion, taking a 1-2 in qualifying while Toyota could only manage positions 3 and 5. However, the #8 Toyota took the lead from the #50 Ferrari on the first lap of the race and stayed comfortably ahead for the first stint until rain and crashes mixed up the field. An overnight crash put the #7 Toyota out of the race, while the #8 Toyota battled with the #50 Ferrari for the lead, though the latter car was forced to pit with a leak and lost six laps. The #51 Ferrari and #8 Toyota would go on to fight for the lead, with the #8 eventually spinning out and taking damage with less than two hours to go, handing Ferrari a historic and unexpected victory on its return to Le Mans. It was a great race. I recommend watching it if you have 24 hours to spare. Visualizing the results of the 2023 race ","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:2:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"Scraping website for car images The official WEC website hosts a page with results from the 2023 race at Le Mans with small pictures of each of the 62 cars - these would be time consuming to save one-by-one, so let’s see if we can scrape them. I copied the source code for this page and dumped it in a text file called le-mans-website.txt. On the official website, if we check the URL of a car image, we see something like this: https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72555/2023-lm-51-ferrari-droite_46c6eb.png We note that the car images are PNGs, and that the image is stored in a directory called “entry_car” - we can probably use this information to distinguish the car images from other images on the page. For instance, there is also a tire manufacturer logo for each car, with URL as follows: https://storage.googleapis.com/ecm-prod/media/cache/tyres/assets/Tyre/Logo_Michelin-1819_5acca3_d0741b.png We can see that this image is stored in a “tyres” folder, not the “entry_car” folder. So, let’s grab every line of source code that displays a PNG image from the “entry_car” directory: sourceCode \u003c- readLines(\"le-mans-website.txt\") rows \u003c- grepl( \"png\", sourceCode ) \u0026 grepl( \"\u003cimg src\", sourceCode ) \u0026 grepl( \"entry_car\", sourceCode ) sourceCode \u003c- sourceCode[rows, ] Now let’s extract the URL from each from. A typical row looks like this: sourceCode[1] [1] \" \u003cimg src=\\\"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72555/2023-lm-51-ferrari-droite_46c6eb.png\\\" alt=\\\"Ferrari 499P\\\"\" We want to extract everything between https:// and .png, which we can do using the gsub(): pngURL \u003c- gsub(\".*\u003cimg src=\\\"|\\\".*\",\"\",sourceCode) The first argument of gsub() is the regular expression to match, the second argument is a string to replace the matched text with, and the third argument is the string xwhere matches are sought. We pass the argument \".*\u003cimg src=\\\"\\\\s*|\\\".*\" as the first argument. The initial portion of this argument, .*\u003cimg src=\" selects all of the characters up to and including \u003cimg src=, while the final portion, \\\".*, selects all of the charcters from \\\" onward. The second argument is a blank string, which effectively deletes all parts of x that match the first argument. If we inspect pngURL, we see that it contains 124 elements - two identical entries for each car. We can delete duplicate entries using the unique() function: pngURL \u003c- unique(pngURL) # Number of cars - should be 62 N \u003c- length(pngURL) Now we’ve got a list of URLs that we can download the images from, but we’ll need to give each image a name. The simplest thing to do is to name each image using each car’s unique number. Let’s check out a bunch of URLs and see how we can do this. pngURL[1:20] [1] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72555/2023-lm-51-ferrari-droite_46c6eb.png\" [2] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72936/2023-lm-toyota-gr010-8-droite_b985c4.png\" [3] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72546/2023-lm-2-cadillac-droite_db12c3.png\" [4] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72547/2023-lm-3-cadillac-droite_6c6dc0.png\" [5] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72554/2023-lm-50-ferrari-droite_256646.png\" [6] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72560/2023-lm-glickenhaus-708-droite_6646c6.png\" [7] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72561/2023-lm-glickenhaus-709-droite_f3a4c3.png\" [8] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72557/2023-lm-93-peugeot-9x8-droite_46c6ee.png\" [9] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/assets/1/engage/72572/2023-lm-34-oreca-07-droite_31bc23.png\" [10] \"https://storage.googleapis.com/ecm-prod/media/cache/entry_car/asset","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:3:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"Retrieving results Scraping the results from the WEC website source could would be a pain, so let’s read the results in from Wikipedia, which is easier to deal with. We can first use the GET() function in the httr package can be used to scrape websites for information, then use the readHTMLTable() function in the XML package to read-in the tables from the scraped website: wiki \u003c- GET(\"https://en.wikipedia.org/wiki/2023_24_Hours_of_Le_Mans\") wikiTables \u003c- readHTMLTable( doc=content(wiki,\"text\"), header=TRUE ) The 2023 edition of Le Mans featured four classes of cars: Hypercar - purpose-built prototypes developed by each team LMP2 - purpose-built prototypes constructed by each team from a list of approved parts from specific manufacturers GTE-AM - modified, production-based grand tourers Innovative - a special class for experimental concepts. This year’s Innovative entry was a NASCAR that was specially modified to handle the Le Mans circuit. resultTable \u003c- wikiTables[[5]] colnames(resultTable) \u003c- resultTable[1, ] # Length of Circuit de la Sarthe (km) circuitLengthKM \u003c- 13.626 resultTable \u003c- filter( resultTable, Pos!=\"Pos\", # Remove first row !is.na(No.) ) %\u003e% mutate( Distance=as.numeric(Laps)*circuitLengthKM, Class=if_else(Class==\"LMP2 (Pro-Am)\",\"LMP2\",Class) ) Only one car finished on the lead lap with the winning #51 Ferrari was the #8 Toyota. At the time the #51 was crossing the finish line, the #8 Toyota was 1 minute and XXX behind. Let’s subtract this portion of the lap that was unfished when the Ferrari took the chequered flag from the Toyota’s overall distance travelled. # Time differential between #8 Toyota and winning #51 Ferrari timeDiff \u003c- resultTable[2,\"Time/Reason\"] # Extract the number of minutes from the timeDiff string mins \u003c- str_match( timeDiff, \"\\\\+\\\\s*(.*?)\\\\:\" )[2] %\u003e% as.numeric() # Extract the number of seconds from the timeDiff string # and add the number of minutes secDiff \u003c- sub(\".*:\",\"\",timeDiff) %\u003e% as.numeric() + 60*mins # Source: The B Pillar (https://mcusercontent.com/58ec14b624aac0d4f32a73311/files/1a937598-5795-63eb-6c7b-4a57844916e4/TBP_Report___2023_WEC_R04_Le_Mans.pdf) # Brandon Hartley - 3:30.475 # Ryo Hirawkawa - 3:31.753 # Sebastian Buemi - 3:31.015 avgLapTimeSecs \u003c- mean( c(30.475+3*60, 31.753+3*60, 31.015+3*60) ) # Proportion of lap remaining when #51 Ferrari took chequered flag pLapRemaining \u003c- secs/avgLapTimeSecs # Subtract lap distance remaining from distance travelled resultTable[2,\"Distance\"] \u003c- resultTable[2,\"Distance\"] - pLapRemaining*circuitLengthKM ","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:4:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"Plotting results We’ll want to differentiate the cars by classes, so let’s assign each class a unique colour. The brewer.pal() function in the RColorBrewer package is useful for generating aesthetically pleasing colour palettes: class \u003c- unique(resultTable$Class) library(RColorBrewer) cols \u003c- brewer.pal(length(class),\"Set1\") Let’s set up a plot so that the x-axis is distance travelled and the y-axis represents finishing position, with first place at the top and last place at the bottom. png( file=\"le-mans-2023-finishing-positions.png\", res=300, height=12, width=7, units=\"in\" ) # We'll need a maximum distance travelled to bound the # x-axis, so round furthest distance travelled to next # 1000th using round_any() in plyr package library(plyr) maxX \u003c- round_any(max(resultTable$Distance),1000,f=ceiling) plot( x = c(0,maxX), y = c(0,N+1), type = \"n\", # Empty plot axes = FALSE, xaxs = \"i\", yaxs = \"i\", xlab = \"Distance travelled (km)\", ylab = \"Finishing position\", main = \"91st 24 Hours of Le Mans (2023)\" ) Add vertical grid lines to improve legibility and add a horizontal line to seperate the cars that finished the race from the cars that did not. The “Pos” or position column of the resultTable is labelled DNF for any cars that did not finish. abline( v=seq(500,maxX-500,by=1000), col=\"grey80\", lty=3 ) abline( v=seq(1000,maxX,by=1000), col=\"grey60\", lty=3 ) # Number of cars that finished the race nFinishers \u003c- sum(resultTable$Pos!=\"DNF\") # DNF line abline( h=N-nFinishers+0.5, lty=2, lwd=2, col=\"orange\" ) Now let’s loop over all the cars and plot the car image and a horizontal line indicating the distance travelled. We want the nose of the car to indicate the distance travelled, with a horizontal line trailing behind, coloured according to class. for( i in 1:N ) { # Read-in the car image carFilename \u003c- paste0(\"images/\",resultTable[i,\"No.\"],\".png\") carObj \u003c- readPNG(carFilename) # Distance travelled by car i dist \u003c- resultTable[i,\"Distance\"] # Class of car i classi \u003c- which( class %in% resultTable[i,\"Class\"] ) # Horizontal line trailing car i segments( x0=0, x1=dist-300, y0=N-i+1, lwd=11, col=cols[classi] ) # Write car info in the trailing horizontal line # If statement prevents this from happening for cars that # DNF'd early since there is no space to write if( dist\u003e500 ) { label \u003c- paste(resultTable[i,\"No.\"],resultTable[i,\"Team\"],resultTable[i,\"Chassis\"],sep=\"-\") text( x = 0, y = N-i+0.95, labels = label, pos = 4, col = \"white\", cex = 0.6 ) } # Plot the car image addImg( obj=carObj, x=dist-250, y=N-i+1.1, width=500 ) } Finally, we can add the axes, legends, and labels: # X-axis axis( side=1, at=seq(0,maxX,by=1000) ) # Y-axis - label in descending order axis( side = 2, at = c(N,seq(N-4,1,by=-5),1), labels = c(1,seq(5,N,by=5),N), las = 1 ) # Legend for car calsses legend( x = \"bottomright\", lwd = 11, col = cols, legend = class, bty = \"n\" ) # Label the DNF line par(font=2) text( x = 0.9*maxX, y = N-nFinishers-1.5, cex = 1.2, labels = \"DNF\", col = \"orange\" ) par(font=1) # Turn off plotting device dev.off() Not bad! Again, there is not a ton of insight to gain from this plot, but it does look pretty cool. The anomaly that jumps out are the finishes around the DNF line - the 41st and 42nd placed finishers appear to have covered a greater distance than the 40th placed car. This occured because the #57 Kessel Racing Ferrari and the #911 Proton Competition Porsche (41st and 42nd place finishers, respectively), retired from the race due to damage, while the #38 Hertz Team Jota Porsche (39th place) was still running at the conclusion of the race despite spending an appreciable amount of time in the garage. Next steps I’d like to apply the apply the table-scraping script to Wikipedia pages for previous Le Mans races and build up a dataset of finishes over the years. I’d also like to do more detailed analyses of endurance car races, though the data is not as readily available as for, say, Formula 1. ","date":"2023-07-24","objectID":"/posts/2-le_mans_2023/:5:0","tags":["R","Motorsports","Data Scraping","Visualization"],"title":"Visualizing the 2023 24 Hours of Le Mans results in R using website scraping and regular expressions","uri":"/posts/2-le_mans_2023/"},{"categories":null,"content":"With the 2023 FIFA Women’s World Cup kicking off today in Australia and New Zealand, I thought I would try to visualize some statistics for all of the participating players. Detailed data on the women’s game is not as readily available as data on the men’s game, so my focus is on some basic statistics for which data is likely to be available (e.g., player age, caps, goals, assists, etc.). A total of 32 teams qualify for the World Cup, which proceeds in two stages. First the teams are divided into 8 groups of 4, with each team playing every other team in their group once. Three points are earned for a win, 1 point for a draw, and no points for a loss. At the end of the group stage, the two teams in each group with the most points advance to a knockout stage in which teams are paired off “tournament-style” in a series of winner-takes-all matches. Each of the 32 teams is required to register 23 players, of which 3 must be goalkeepers. This gives a total of 736 players competing in the tournament: 640 outfield players and 96 goalkeers. Reading-in data The first order of business is acquiring squad lists for each team. I found an official PDF from FIFA listing the full squads for each team (link) but the lists of players is spread across multiple tables and there is a lot of extraneous information - both of these things tend to cause problems for PDF-scraping tools. I instead found a Wikipedia article listing the players for each team (link) and figured these tables would be easier to retreive. The GET() function in the httr package can be used to scrape websites for information. We can then use the readHTMLTable() function in the XML package read all of the tables in the scraped data: library(httr) library(XML) wiki \u003c- GET(\"https://en.wikipedia.org/wiki/2023_FIFA_Women%27s_World_Cup_squads\") wikiTables \u003c- readHTMLTable( doc=content(wiki,\"text\"), header=TRUE ) As an aside, there is an specific order in which the 32 teams are listed in official FIFA communications. Specifically, teams are first ordered by group (Group A, Group B, etc.) and within those groups they are ordered alphabetically. The squads on the Wikipedia page we are scraping are listed in this official order. Let’s take a look at the wikiTables object: mode(wikiTables) [1] \"list\" length(wikiTables) [1] 38 wikiTables[[1]] No.\\n Pos.\\n Player\\n Date of birth (age)\\n Caps\\n Goals\\n Club\\n 1 1 1GK Erin Nayler (1992-04-17)17 April 1992 (aged 31) 84 0 IFK Norrköping 2 2 3MF Ria Percival (vice-captain) (1989-12-07)7 December 1989 (aged 33) 163 15 Tottenham Hotspur 3 3 2DF Claudia Bunge (1999-09-21)21 September 1999 (aged 23) 22 0 Melbourne Victory 4 4 2DF CJ Bott (1995-04-22)22 April 1995 (aged 28) 38 3 Leicester City 5 5 2DF Michaela Foster (1999-01-09)9 January 1999 (aged 24) 6 0 Wellington Phoenix 6 6 3MF Malia Steinmetz (1999-01-18)18 January 1999 (aged 24) 20 0 Western Sydney Wanderers 7 7 2DF Ali Riley (captain) (1987-10-30)30 October 1987 (aged 35) 154 2 Angel City 8 8 3MF Daisy Cleverley (1997-04-30)30 April 1997 (aged 26) 31 2 HB Køge 9 9 4FW Gabi Rennie (2001-07-07)7 July 2001 (aged 22) 26 2 Arizona State Sun Devils 10 10 3MF Annalie Longo (1991-07-01)1 July 1991 (aged 32) 129 15 Christchurch United 11 11 3MF Olivia Chance (1993-10-05)5 October 1993 (aged 29) 45 2 Celtic 12 12 3MF Betsy Hassett (1990-08-04)4 August 1990 (aged 32) 145 13 Wellington Phoenix 13 13 2DF Rebekah Stott (1993-06-17)17 June 1993 (aged 30) 90 4 Brighton \u0026 Hove Albion 14 14 2DF Katie Bowen (1994-04-15)15 April 1994 (aged 29) 94 3 Melbourne City 15 15 4FW Paige Satchell (1998-04-13)13 April 1998 (aged 25) 43 2 Wellington Phoenix 16 16 4FW Jacqui Hand (1999-02-19)19 February 1999 (aged 24) 14 2 Åland United 17 17 4FW Hannah Wilkinson (1992-05-28)28 May 1992 (aged 31) 115 28 Melbourne City 18 18 4FW Grace Jale (1999-04-10)10 April 1999 (aged 24) 17 2 Canberra United 19 19 2DF Elizabeth Anton (1998-12-12)12 December 1998 (aged 24) 19 0 Perth Glory 20 20 4FW Indiah-Paige Riley (2001-12-20)20 Decem","date":"2023-07-21","objectID":"/posts/1-wwc/:0:0","tags":["R","Football","Data Scraping","Visualization"],"title":"Visualizing the age distribution of Women's World Cup squads using R","uri":"/posts/1-wwc/"},{"categories":null,"content":"Analysis Some interesting observations become apparent upon viewing the chart. South Korea and Haiti offer some important points of contrast. Not only are South Korea and Haiti the oldest and youngest squads on average, but South Korea’s squad is quite evenly distributed - there are no more than two players at any age and there are just three players younger than 25 (though this does include the youngest player in the tournament, aged 16). In contrast, all of Haiti’s players except for 1 are between 19 and 26 years old, including 6 players aged 19 and 4 players aged 20. The Republic of Ireland has an older, tightly-clustered squad - 61% players between 26 and 30. The Irish squad has only three players younger than 26. Expectedly, captains tend to be among the most senior squad players, though the captains of both Republic of Ireland and Zambia are younger than the average squad age. In the men’s game a premium is often placed on experience for goalkeepers and defenders, while younger players may be more likely to feature in midfield or attacking roles due to the increased mobility needed for these roles. There are some minor team-specific patterns to note from the plot. For exmaples, several teams feature two veteran goalies, (e.g., South Korea, Nigeria, Morocco, Panama). It is difficult to discern any clear age patterns from this plot. However, we note that these age distributions may be skewed by presence of players who will play few if any minutes at the tournament. Re-plotting the age distributions after the tournament with such marginal players excluded may reveal more discernable patterns. Some other anomalies: -The United States’ youngest defender and midfield are 23 and 24 years old respectively. Only three players on the US squad are younger than 23 and all of those players are forwards. -China and Spain have relatively young keepers. China’s oldest GK is 25, while all of Spain’s keepers are between 21 and 23. ","date":"2023-07-21","objectID":"/posts/1-wwc/:1:0","tags":["R","Football","Data Scraping","Visualization"],"title":"Visualizing the age distribution of Women's World Cup squads using R","uri":"/posts/1-wwc/"},{"categories":null,"content":"Next steps It would be nice to make this plot interactive so that hovering over the individual points triggers a display of player-specific information. I’ll attempt to construct such an interactive plot in Shiny or Tableau for one or more of the men’s European club leagues when they kick off next month. ","date":"2023-07-21","objectID":"/posts/1-wwc/:2:0","tags":["R","Football","Data Scraping","Visualization"],"title":"Visualizing the age distribution of Women's World Cup squads using R","uri":"/posts/1-wwc/"},{"categories":null,"content":" Profile Quantitative scientist with 10+ years of professional experience in data analysis/visualization, modelling, Bayesian statistics, and strategy optimization. Highly proficient in a variety of scripting languages (e.g., R, MATLAB, Python, SQL) and complex model optimization tools (e.g., TMB, ADMB). Education 2022 PhD, Resource and Environmental Management, Simon Fraser University Thesis: Evaluating ecosystem responses to grey seal abundance changes in the southern Gulf of St. Lawrence (link) 2014 MRM, Resource and Environmental Management, Simon Fraser University Research project: Bayesian forward run reconstruction for sockeye salmon fisheries in the Fraser River (link) 2010 BSc, Mathematics, Simon Fraser University Professional Experience ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Employment ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Landmark Fisheries Research 2023 Fisheries Analyst Selected projects led: Developing quantitative tools to account for changing demographics and meet Fisheries Act provisions in Canadian-origin Yukon River Chinook salmon for Fisheries and Oceans Canada Sensitivity analysis of the 2021 WPTT Indian Ocean yellowfin tuna stock assessment within Stock Synthesis 3 for Europêche Tuna Group 2015-2023 Associate Consultant Selected projects led: Improving Sustainability of British Columbia's Commercial Spot Prawn (Pandalus platyceros) Fishery and Prawn Stocks for British Columbia Salmon Restoration and Innovation Fund Fishing mortality assessment for Eastern Scotian Shelf (NAFO Division 4VW) Winter Skate for Groundfish Enterprise Allocation Council / Association of Seafood Producers ","date":"0001-01-01","objectID":"/about/:1:1","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Fisheries and Oceans Canada 2023 Science Advisor, Casual Evaluated the potential impacts of grey seal predation and fishery bycatch/discards on cod mortaltiy on the Western Scotian Shelf and Bay of Fundy. 2019-2022 Biologist, Casual Developed multispecies model of seal/cod/herring interactions in the southern Gulf of St. Lawrence in TMB and R and evaluated seal reduction scenarios. ","date":"0001-01-01","objectID":"/about/:1:2","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"British Columbia Conservation Foundation 2015 Model Programmer Processed camera data of fishing effort on BC lakes. ","date":"0001-01-01","objectID":"/about/:1:3","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Simon Fraser University 2010-2011 Research Assistant in Fisheries Population Dynamics Performed population dynamics modelling of BC Sablefish and other species in R. ","date":"0001-01-01","objectID":"/about/:1:4","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Contracting 2022-2023 Fisheries and Oceans Canada Project title: Investigating the role of grey seal predation on 4X5Y cod productivity change 2022-2023 Fisheries and Oceans Canada Project title: Identifying optimal harvest strategies for southern Gulf of St. Lawrence cod in light a predation by a top predator 2012-2013 Pacific Salmon Commission, subcontracted by S.C. Fisheries Project title: Genetic and environmental management model for BC and Washington chum salmon fisheries Publications ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Peer-reviewed 3. Connors, B.M., Siegle, M.R., Harding, J., Rossi S., Staton, B.A., Jones, M.L., Bradford, M.J., Brown, R., Bechtol, B., Doherty, B., Cox, S., Sutherland, B.J.G. 2022. Chinook salmon diversity contributes to fishery stability and trade-offs with mixed-stock harvest. Ecological Applications, 32(8). https://doi.org/10.1002/eap.2709 2. Rossi, S.P., S.P. Cox, M.O. Hammill, C.E. den Heyer, A. Mosnier, H.P. Benoît. 2021. Forecasting the response of a recovered pinniped population to sustainable harvest strategies that reduce their impact as predators. ICES Journal of Marine Science, 78(5): 1804–1814. https://doi.org/10.1093/icesjms/fsab088 2. Rossi, S.P., S.P. Cox, H.P. Benoît, D.P. Swain. 2019. Inferring fisheries stock status from competing hypotheses. Fisheries Research, 216: 155-166. https://doi.org/10.1016/j.fishres.2019.04.011 ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"In preparation / in review 4. Rossi, S.P., Benoît, H.P., Cox, S.P. Retrospective evaluation of southern Gulf of St. Lawrence Atlantic Cod fishery management performance. 3. Rossi, S.P., Wang, Y., den Heyer, C.E., Benoît, H.P. Evaluating the potential impacts of grey seal predation and bycatch on cod productivity on the Western Scotian Shelf and in the Bay of Fundy. 2. Rossi, S.P., S.P. Cox, H.P. Benoît. Extirpation of Atlantic Cod from a Northwest Atlantic ecosystem in the absence of predator control: inference from a triangular food web model. 1. Rossi, S.P., S.P. Cox, Johnson, S.D.N., Benson, A. Improving Sustainability of British Columbia's Commercial Spot Prawn (Pandalus platyceros) Fishery and Prawn Stocks (preprint) ","date":"0001-01-01","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Technical Reports 5. Johnson, S.D.N., Cox, S.P., Cleary, J.S., Benson, A.J., Power, S.J.H., and Rossi, S.P. A new stock assessment and simulation modelling framework for Pacific Herring Clupea pallasii to resolve time- varying natural mortality, reference points, and implications for future harvest strategies. Canadian Science Advisory Secretariat Research Document 2023/nnn. 4. Hammill, M.O., S.P. Rossi, A. Mosnier, C.E. den Heyer, W.D. Bowen, and G.B. Stenson. 2023. Grey Seal Abundance in Canadian Waters and Harvest Advice. Canadian Science Advisory Secretariat Research Document 2023/nnn. 3. Johnson, S.D.N., S.P. Rossi, S.P. Cox. 2021. Sensitivity of CMP rankings to conservation targets for Atlantic Bluefin Tuna. ICCAT Collective Volume of Scientific Papers, 78(3): 623-639. (link) 2. Johnson, S.D.N., S.P. Rossi, S.P. Cox. 2020. Two classes of multi-model candidate management procedures for Atlantic Bluefin Tuna. ICCAT Collective Volume of Scientific Papers, 77(2): 777-799. (link) 1. Rossi, S.P., S.P. Cox, D.P. Swain, H.P. Benoît. 2018. A mixed-effects approach to estimating time- varying natural mortality in a statistical catch-at-age model: Application to stock assessments for eastern Georges Bank Atlantic Cod and Georges Bank Yellowtail Flounder. Transboundary Resource Assessment Committee Reference Document. (link) Presentations 2018 Rossi, S.P., B. Doherty, S.P. Cox. Linking decision-making for fisheries and sensitive benthic habitats using management strategy evaluation with spatial assessment models. 20th Western Groundfish Conference, Seaside, CA. Feb 15, 2018. 2018 Doherty, B., S.P. Rossi, S.P. Cox. Risk assessment framework for quantifying bottom fishing impacts on sensitive benthic habitats. 20th Western Groundfish Conference, Seaside, CA. Feb 15, 2018. 2017 Rossi, S.P., S.P. Cox, D.P. Swain, H.P. Benoît. A mixed-effects statistical catch-at-age model to estimate biomass and fishing mortality in the presence of time-varying parameters. Transboundary Resource and Assessment Committee Science Assessment Meeting, St. Andrews, NB. July 12, 2017. 2015 Rossi, S.P., S.P. Cox. Chum Genetic and Environmental Management Model: Run reconstruction for Pacific chum fisheries. Pacific Salmon Commission SpeakEasy Seminar Series, Vancouver, BC. Dec 8, 2015. 2015 Rossi, S.P. Forward run reconstruction for Pacific salmon fisheries. NPAFC International Symposium on Pacific Salmon and Steelhead Production in a Changing Climate: Past, Present, and Future, Kobe, Japan. May 18, 2015. 2015 Rossi, S.P. Run reconstruction for sockeye salmon fisheries in the Fraser River. Interdisciplinary Ecology \u0026 Aquatic Science Symposium, Simon Fraser University, Burnaby, BC. January 24, 2015. 2014 Rossi, S.P. Evaluating in-season management procedures for Fraser River sockeye salmon fisheries. Pacific Ecology and Evolution Conference, Bamfield, BC. March 1, 2014. 2012 Rossi, S.P. Run reconstruction models for Fraser River Sockeye salmon. Pacific Ecology and Evolution Conference, Bamfield, BC. March 3, 2012. 2009 Rossi, S.P., N. Richardson. Using cellular automata to model the spread of HIV among injection drug users. Canadian Undergraduate Mathematics Conference, Ottawa, ON. July 10, 2009. ","date":"0001-01-01","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":" Formula 1 Head-to-Head Teammate Comparison App Compare the performance of any Formula 1 driver against their teammates throughout their career. Updated with new results after each race. Powered by the Ergast Formula 1 dataset. Bayesian Population Model for Southwest Nova Scotia Grey Seals Allows a user to fit and tune a grey seal population model in Template Model Builder using Hamiltonian Monte Carlo. Must be deployed locally. ","date":"0001-01-01","objectID":"/viz/:0:0","tags":null,"title":"Interactive Tools","uri":"/viz/"}]